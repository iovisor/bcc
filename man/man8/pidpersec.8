.TH pidpersec 8  "2015-08-18" "USER COMMANDS"
.SH NAME
pidpersec \- Count new processes (via fork()). Uses Linux eBPF/bcc.
.SH SYNOPSIS
.B pidpersec
.SH DESCRIPTION
pidpersec shows how many new processes were created each second. There
can be performance issues caused by many short-lived processes, which may not
be visible in sampling tools like top(1). pidpersec provides one way to
investigate this behavior.

This works by tracing the kernel sched_fork() function using dynamic tracing,
and will need updating to match any changes to this function.

Since this uses BPF, only the root user can use this tool.
.SH REQUIREMENTS
CONFIG_BPF and bcc.
.SH EXAMPLES
.TP
Count new processes created each second:
#
.B pidpersec
.SH OVERHEAD
This traces the kernel fork function, and maintains an in-kernel count which is
read asynchronously from user-space. As the rate of this is generally expected to
be low (<< 1000/s), the overhead is also expected to be negligible.
.SH SOURCE
This is from bcc.
.IP
https://github.com/iovisor/bcc
.PP
Also look in the bcc distribution for a companion _examples.txt file containing
example usage, output, and commentary for this tool.
.SH OS
Linux
.SH STABILITY
Unstable - in development.
.SH AUTHOR
Brendan Gregg, original BCC Python version
Tiago Ilieve, CO-RE version
.SH SEE ALSO
top(1)
