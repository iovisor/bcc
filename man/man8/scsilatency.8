.TH scsilatency 8  "2022-10-10" "USER COMMANDS"
.SH NAME
scsilatency \- Summarize SCSI layer I/O latency as a histogram.
.SH SYNOPSIS
.B scsilatency [\-h] [\-F] [\-T] [\-m] [\-D] [\-e] [interval [count]]
.SH DESCRIPTION
scsilatency traces SCSI layer I/O (disk I/O), and records the distribution
of I/O latency (time). This is printed as a histogram either on Ctrl-C, or
after a given interval in seconds.

The latency of disk I/O operations is measured from when requests are issued to the device
up to completion. 

This tool uses in-kernel eBPF maps for storing timestamps and the histogram,
for efficiency.

This works by tracing various kernel scsi_*() functions using dynamic tracing,
and will need updating to match any changes to these functions.

Since this uses BPF, only the root user can use this tool.
.SH REQUIREMENTS
CONFIG_BPF and bcc.
.SH OPTIONS
\-h
Print usage message.
.TP
\-T
Include timestamps on output.
.TP
\-m
Output histogram in milliseconds.
.TP
\-D
Print a histogram per disk device.
.TP
\-F
Print a histogram per set of I/O flags.
.TP
\-j
Print a histogram dictionary
.TP
\-e
Show extension summary(total, average)
.TP
interval
Output interval, in seconds.
.TP
count
Number of outputs.
.SH EXAMPLES
.TP
Summarize SCSI layer I/O latency as a histogram:
#
.B scsilatency
.TP
Print 1 second summaries, 10 times:
#
.B scsilatency 1 10
.TP
Print 1 second summaries, using milliseconds as units for the histogram, and
include timestamps on output:
#
.B scsilatency \-mT 1
.TP
Show a latency histogram for each disk device separately:
#
.B scsilatency \-D
.TP
Show a latency histogram in a dictionary format:
#
.B scsilatency \-j
.TP
Also show extension summary(total, average):
#
.B scsilatency \-e
.SH FIELDS
.TP
usecs
Microsecond range
.TP
msecs
Millisecond range
.TP
count
How many I/O fell into this range
.TP
distribution
An ASCII bar chart to visualize the distribution (count column)
.SH OVERHEAD
This traces kernel functions and maintains in-kernel timestamps and a histogram,
which are asynchronously copied to user-space. This method is very efficient,
and the overhead for most storage I/O rates (< 10k IOPS) should be negligible.
If you have a higher IOPS storage environment, test and quantify the overhead
before use.
.SH SOURCE
This is from bcc.
.IP
https://github.com/iovisor/bcc
.PP
Also look in the bcc distribution for a companion _examples.txt file containing
example usage, output, and commentary for this tool.
.SH OS
Linux
.SH STABILITY
Unstable - in development.
.SH AUTHOR
Weibang Liu
.SH SEE ALSO
biosnoop(8)
