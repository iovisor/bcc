Demonstrations of scsilatency, the Linux eBPF/bcc version.


scsilatency traces SCSI layer I/O (disk I/O), and records the distribution
of I/O latency (time), printing this as a histogram when Ctrl-C is hit.
For example:

# ./scsilatency
Tracing SCSI layer I/O... Hit Ctrl-C to end.
^C
     usecs           : count     distribution
       0 -> 1        : 0        |                                      |
       2 -> 3        : 0        |                                      |
       4 -> 7        : 0        |                                      |
       8 -> 15       : 0        |                                      |
      16 -> 31       : 0        |                                      |
      32 -> 63       : 0        |                                      |
      64 -> 127      : 1        |                                      |
     128 -> 255      : 12       |********                              |
     256 -> 511      : 15       |**********                            |
     512 -> 1023     : 43       |*******************************       |
    1024 -> 2047     : 52       |**************************************|
    2048 -> 4095     : 47       |**********************************    |
    4096 -> 8191     : 52       |**************************************|
    8192 -> 16383    : 36       |**************************            |
   16384 -> 32767    : 15       |**********                            |
   32768 -> 65535    : 2        |*                                     |
   65536 -> 131071   : 2        |*                                     |

The latency of the disk I/O is measured from the issue to the device to its
completion.

This example output shows a large mode of latency from about 128 microseconds
to about 32767 microseconds (33 milliseconds). The bulk of the I/O was
between 1 and 8 ms, which is the expected block device latency for
rotational storage devices.

The highest latency seen while tracing was between 65 and 131 milliseconds:
the last row printed, for which there were 2 I/O.

For efficiency, scsilatency uses an in-kernel eBPF map to store timestamps
with requests, and another in-kernel map to store the histogram (the "count")
column, which is copied to user-space only when output is printed. These
methods lower the performance overhead when tracing is performed.


In the following example, the -m option is used to print a histogram using
milliseconds as the units (which eliminates the first several rows), -T to
print timestamps with the output, and to print 1 second summaries 5 times:

# ./scsilatency -mT 1 5
Tracing SCSI layer I/O... Hit Ctrl-C to end.

04:48:15
     msecs               : count     distribution
         0 -> 1          : 9        |****************************************|

04:48:16

04:48:17
     msecs               : count     distribution
         0 -> 1          : 1        |********************                    |
         2 -> 3          : 2        |****************************************|

04:48:18

04:48:19
     msecs               : count     distribution
         0 -> 1          : 71       |*******                                 |
         2 -> 3          : 13       |*                                       |
         4 -> 7          : 32       |***                                     |
         8 -> 15         : 380      |****************************************|
        16 -> 31         : 7        |                                        |
        32 -> 63         : 32       |***                                     |


How the I/O latency distribution changes over time can be seen.


The -D option will print a histogram per disk. Eg:

# ./scsilatency -D
Tracing SCSI layer I/O... Hit Ctrl-C to end.
^C

disk = 'sda'
     usecs               : count     distribution
         0 -> 1          : 0        |                                        |
         2 -> 3          : 0        |                                        |
         4 -> 7          : 0        |                                        |
         8 -> 15         : 0        |                                        |
        16 -> 31         : 1991     |*                                       |
        32 -> 63         : 14764    |********                                |
        64 -> 127        : 67282    |****************************************|
       128 -> 255        : 12891    |*******                                 |
       256 -> 511        : 436      |                                        |
       512 -> 1023       : 205      |                                        |
      1024 -> 2047       : 383      |                                        |
      2048 -> 4095       : 759      |                                        |
      4096 -> 8191       : 2775     |*                                       |
      8192 -> 16383      : 1067     |                                        |
     16384 -> 32767      : 2309     |*                                       |
     32768 -> 65535      : 97       |                                        |

This output shows that only sda device has be accessed, usually between 0.03 ms
and 0.2 ms.


The -F option prints a separate histogram for each unique set of request
flags. For example:

./scsilatency.py -Fm
Tracing SCSI layer I/O... Hit Ctrl-C to end.
^C

flags = Read
     msecs               : count     distribution
         0 -> 1          : 100      |****************************************|
         2 -> 3          : 6        |**                                      |

flags = Write
     msecs               : count     distribution
         0 -> 1          : 247      |****************************************|
         2 -> 3          : 24       |***                                     |
         4 -> 7          : 11       |*                                       |

These can be handled differently by the storage device, and this mode lets us
examine their performance in isolation.


The -e option shows extension summary(total, average)
For example:
# ./scsilatency.py -e
^C
     usecs               : count     distribution
         0 -> 1          : 0        |                                        |
         2 -> 3          : 0        |                                        |
         4 -> 7          : 0        |                                        |
         8 -> 15         : 0        |                                        |
        16 -> 31         : 0        |                                        |
        32 -> 63         : 6        |**                                      |
        64 -> 127        : 31       |**************                          |
       128 -> 255        : 87       |****************************************|
       256 -> 511        : 44       |********************                    |
       512 -> 1023       : 11       |*****                                   |
      1024 -> 2047       : 32       |**************                          |
      2048 -> 4095       : 7        |***                                     |
      4096 -> 8191       : 13       |*****                                   |
      8192 -> 16383      : 1        |                                        |

avg = 826 usecs, total: 191862 usecs, count: 232

Sometimes 128 -> 255 usecs is not enough for throughput tuning.
Especially a little difference in performance downgrade.
By this extension, we know the value in log2 range is about 826 usecs.


The -j option prints a dictionary of the histogram.
For example:

# ./scsilatency.py -j
^C
{'val_type': 'usecs', 'data': [{'count': 0, 'interval-start': 0, 'interval-end': 1}, {'count': 0, 'interval-start': 2, 'interval-end': 3}, {'count': 0, 'interval-start': 4, 'interval-end': 7}, {'count': 0, 'interval-start': 8, 'interval-end': 15}, {'count': 6, 'interval-start': 16, 'interval-end': 31}, {'count': 32, 'interval-start': 32, 'interval-end': 63}, {'count': 52, 'interval-start': 64, 'interval-end': 127}, {'count': 26, 'interval-start': 128, 'interval-end': 255}, {'count': 95, 'interval-start': 256, 'interval-end': 511}, {'count': 171, 'interval-start': 512, 'interval-end': 1023}, {'count': 356, 'interval-start': 1024, 'interval-end': 2047}, {'count': 712, 'interval-start': 2048, 'interval-end': 4095}, {'count': 2627, 'interval-start': 4096, 'interval-end': 8191}, {'count': 835, 'interval-start': 8192, 'interval-end': 16383}, {'count': 2113, 'interval-start': 16384, 'interval-end': 32767}, {'count': 62, 'interval-start': 32768, 'interval-end': 65535}, {'count': 33, 'interval-start': 65536, 'interval-end': 131071}], 'ts': '2021-01-09 04:22:46'}

the key `data` is the list of the log2 histogram intervals. The `interval-start` and `interval-end` define the
latency bucket and `count` is the number of I/O's that lie in that latency range.

# ./scsilatency.py -jF
^C
{'val_type': 'usecs', 'flags': 'Read', 'data': [{'count': 0, 'interval-start': 0, 'interval-end': 1}, {'count': 0, 'interval-start': 2, 'interval-end': 3}, {'count': 0, 'interval-start': 4, 'interval-end': 7}, {'count': 0, 'interval-start': 8, 'interval-end': 15}, {'count': 0, 'interval-start': 16, 'interval-end': 31}, {'count': 61, 'interval-start': 32, 'interval-end': 63}, {'count': 40620, 'interval-start': 64, 'interval-end': 127}, {'count': 7493, 'interval-start': 128, 'interval-end': 255}, {'count': 368, 'interval-start': 256, 'interval-end': 511}, {'count': 96, 'interval-start': 512, 'interval-end': 1023}, {'count': 249, 'interval-start': 1024, 'interval-end': 2047}, {'count': 2767, 'interval-start': 2048, 'interval-end': 4095}, {'count': 21, 'interval-start': 4096, 'interval-end': 8191}, {'count': 4, 'interval-start': 8192, 'interval-end': 16383}, {'count': 40, 'interval-start': 16384, 'interval-end': 32767}], 'ts': '2021-01-09 04:27:11'}
{'val_type': 'usecs', 'flags': 'Write', 'data': [{'count': 0, 'interval-start': 0, 'interval-end': 1}, {'count': 0, 'interval-start': 2, 'interval-end': 3}, {'count': 0, 'interval-start': 4, 'interval-end': 7}, {'count': 0, 'interval-start': 8, 'interval-end': 15}, {'count': 2126, 'interval-start': 16, 'interval-end': 31}, {'count': 15362, 'interval-start': 32, 'interval-end': 63}, {'count': 27248, 'interval-start': 64, 'interval-end': 127}, {'count': 3974, 'interval-start': 128, 'interval-end': 255}, {'count': 44, 'interval-start': 256, 'interval-end': 511}, {'count': 80, 'interval-start': 512, 'interval-end': 1023}, {'count': 133, 'interval-start': 1024, 'interval-end': 2047}, {'count': 265, 'interval-start': 2048, 'interval-end': 4095}, {'count': 474, 'interval-start': 4096, 'interval-end': 8191}, {'count': 2022, 'interval-start': 8192, 'interval-end': 16383}, {'count': 1402, 'interval-start': 16384, 'interval-end': 32767}, {'count': 32, 'interval-start': 32768, 'interval-end': 65535}], 'ts': '2021-01-09 04:27:11'}

The -j option used with -F prints a histogram dictionary per set of I/O flags.

# ./scsilatency.py -jD
^C
{'val_type': 'usecs', 'data': [{'count': 0, 'interval-start': 0, 'interval-end': 1}, {'count': 0, 'interval-start': 2, 'interval-end': 3}, {'count': 0, 'interval-start': 4, 'interval-end': 7}, {'count': 0, 'interval-start': 8, 'interval-end': 15}, {'count': 2052, 'interval-start': 16, 'interval-end': 31}, {'count': 15045, 'interval-start': 32, 'interval-end': 63}, {'count': 67036, 'interval-start': 64, 'interval-end': 127}, {'count': 12746, 'interval-start': 128, 'interval-end': 255}, {'count': 403, 'interval-start': 256, 'interval-end': 511}, {'count': 175, 'interval-start': 512, 'interval-end': 1023}, {'count': 345, 'interval-start': 1024, 'interval-end': 2047}, {'count': 692, 'interval-start': 2048, 'interval-end': 4095}, {'count': 2686, 'interval-start': 4096, 'interval-end': 8191}, {'count': 992, 'interval-start': 8192, 'interval-end': 16383}, {'count': 2269, 'interval-start': 16384, 'interval-end': 32767}, {'count': 61, 'interval-start': 32768, 'interval-end': 65535}, {'count': 26, 'interval-start': 65536, 'interval-end': 131071}], 'ts': '2021-01-09 04:29:16', 'Bucket ptr': 'sda'}

The -j option used with -D prints a histogram dictionary per disk device.

# ./scsilatency.py -jm
^C
{'val_type': 'msecs', 'data': [{'count': 15, 'interval-start': 0, 'interval-end': 1}, {'count': 3, 'interval-start': 2, 'interval-end': 3}], 'ts': '2021-01-09 04:30:22'}

The -j with -m prints a millisecond histogram dictionary. The `value_type` key is set to msecs.

USAGE message:

# ./scsilatency -h
usage: scsilatency [-h] [-T] [-m] [-D] [-F] [-e] [-j] [interval] [count]

Summarize UFS layer device I/O latency as a histogram

positional arguments:
  interval            output interval, in seconds
  count               number of outputs

optional arguments:
  -h, --help          show this help message and exit
  -T, --timestamp     include timestamp on output
  -m, --milliseconds  millisecond histogram
  -D, --disks         print a histogram per disk device
  -F, --flags         print a histogram per set of I/O flags
  -e, --extension     summarize average/total value
  -j, --json          json output

examples:
    ./scsilatency                    # summarize UFS driver I/O latency as a histogram
    ./scsilatency 1 10               # print 1 second summaries, 10 times
    ./scsilatency -mT 1              # 1s summaries, milliseconds, and timestamps
    ./scsilatency -D                 # show each disk device separately
    ./scsilatency -F                 # show I/O flags separately
    ./scsilatency -j                 # print a dictionary
    ./scsilatency -e                 # show extension summary(total, average)

