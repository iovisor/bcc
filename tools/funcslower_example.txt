Demonstrations of funcslower, the Linux eBPF/bcc version.


funcslower shows kernel or user function invocations slower than a threshold.
This can be used for last-resort diagnostics when aggregation-based tools have
failed. For example, trace the open() function in libc when it is slower than
1 microsecond (us):

# ./funcslower c:open -u 1
Tracing function calls slower than 1 us... Ctrl+C to quit.
COMM           PID    LAT(us)             RVAL FUNC
less           27074    33.77                3 c:open 
less           27074     9.96 ffffffffffffffff c:open 
less           27074     5.92 ffffffffffffffff c:open 
less           27074    15.88 ffffffffffffffff c:open 
less           27074     8.89                3 c:open 
less           27074    15.89                3 c:open 
sh             27075    20.97                4 c:open 
bash           27075    20.14                4 c:open 
lesspipe.sh    27075    18.77                4 c:open 
lesspipe.sh    27075    11.21                4 c:open 
lesspipe.sh    27075    13.68                4 c:open 
file           27076    14.83 ffffffffffffffff c:open 
file           27076     8.02                4 c:open 
file           27076    10.26                4 c:open 
file           27076     6.55                4 c:open 
less           27074    11.67                4 c:open 
^C

This shows several open operations performed by less and some helpers it invoked
in the process. The latency (in microseconds) is shown, as well as the return
value from the open() function, which helps indicate if there is a correlation
between failures and slow invocations. Most open() calls seemed to have 
completed successfully (returning a valid file descriptor), but some have failed
and returned -1.

You can also trace syscalls and kernel functions

# ./funcslower -m 10 syscall:write vfs_read
Tracing function calls slower than 10 ms... Ctrl+C to quit.
COMM           PID    LAT(ms)             RVAL FUNC
bash           11527    78.97                1 vfs_read 
bash           11527   101.26                1 vfs_read 
bash           11527  1053.60                1 vfs_read 
bash           11527    44.21                1 vfs_read 
bash           11527   200.49               10 syscall:write
^C

Occasionally, it is also useful to see the arguments passed to the functions.
The raw hex values of the arguments are available when using the -a switch:

# ./funcslower __kmalloc -a 2 -u 1
Tracing function calls slower than 1 us... Ctrl+C to quit.
COMM           PID    LAT(us)             RVAL FUNC ARGS
kworker/0:2    27077     7.46 ffff90054f9f8e40 __kmalloc 0x98 0x1400000
kworker/0:2    27077     6.84 ffff90054f9f8e40 __kmalloc 0x98 0x1400000
bash           11527     6.87 ffff90054f9f8e40 __kmalloc 0x90 0x1408240
bash           11527     1.15 ffff90054f9f8e40 __kmalloc 0x90 0x1408240
bash           11527     1.15 ffff90055a1b8c00 __kmalloc 0x2c 0x1400240
bash           11527     1.18 ffff90054b87d240 __kmalloc 0x1c 0x1400040
bash           11527    10.59 ffff900546d60000 __kmalloc 0x10000 0x14082c0
bash           11527     1.49 ffff90054fbd4c00 __kmalloc 0x280 0x15080c0
bash           11527     1.00 ffff90054789b000 __kmalloc 0x800 0x15012c0
bash           27128     3.47 ffff90057ca1a200 __kmalloc 0x150 0x1400240
bash           27128     1.82 ffff90054fbd4c00 __kmalloc 0x230 0x14000c0
bash           27128     1.17 ffff90054b87d5a0 __kmalloc 0x1c 0x14000c0
perf           27128     4.81 ffff90054f9f8e40 __kmalloc 0x90 0x1408240
perf           27128    24.71 ffff900566990000 __kmalloc 0x10000 0x14082c0
^C

This shows the first two arguments to __kmalloc -- the first one is the size
of the requested allocation. The return value is also shown (null return values
would indicate a failure).

# ./funcslower -U -m 30 '/usr/sbin/nginx:database_write'
Tracing function calls slower than 30 ms... Ctrl+C to quit.
COMM           PID    LAT(ms)             RVAL FUNC
nginx          1617     30.15                9 /usr/sbin/nginx:database_write
    DataBaseProvider::setData(std::string const&, record_s&)
    UserDataProvider::saveRecordData(RecordData const&)
    RequestProcessor::writeResponse(int)
    RequestProcessor::processRequest()
    RequestRouter::processRequest(RequestWrapper*, ResponseWrapper*)
    ngx_http_core_content_phase
    ngx_http_core_run_phases
    ngx_http_process_request
    ngx_process_events_and_timers
    ngx_spawn_process
    ngx_master_process_cycle
    main
    __libc_start_main
    [unknown]
nginx          1629     30.14                9 /usr/sbin/nginx:database_write
    DataBaseProvider::setData(std::string const&, record_s&)
    UserDataProvider::saveRecordData(RecordData const&)
    RequestProcessor::writeResponse(int)
    RequestProcessor::processRequest()
    RequestRouter::processRequest(RequestWrapper*, ResponseWrapper*)
    ngx_http_core_content_phase
    ngx_http_core_run_phases
    ngx_http_process_request
    ngx_process_events_and_timers
    ngx_spawn_process
    ngx_master_process_cycle
    main
    __libc_start_main
    [unknown]
^C

Shows the user space stack trace of calls to the user space function call open taking longer than 30 ms.

# ./funcslower  -T -m 10 syscall:io_submit  -KB -p 351521
TIME       COMM           PID    LAT(ms)             RVAL FUNC
16:10:18   fio            351521   26.07                1 syscall:io_submit
B        1    0.00   25.99   25.99
    finish_task_switch
    __sched_text_start
    schedule
    io_schedule
    bit_wait_io
    __wait_on_bit
    out_of_line_wait_on_bit
    do_get_write_access
    jbd2_journal_get_write_access
    __ext4_journal_get_write_access
    ext4_reserve_inode_write
    ext4_mark_inode_dirty
    ext4_dirty_inode
    __mark_inode_dirty
    generic_update_time
    file_update_time
    __generic_file_write_iter
    ext4_file_write_iter
    aio_write
    io_submit_one
    __x64_sys_io_submit
    kretprobe_trampoline
Shows kernel stack trace for syscall:io_submit slower than 10ms if it was blocked on schedule

# ./funcslower -f -T -m 1000 -KB  syscall:sync
17:10:15   sync           30041  5470.08                0 syscall:sync 
B        2    0.13 5109.46  401.40 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_supers;sync_inodes_sb;wb_wait_for_completion;schedule;__sched_text_start;finish_task_switch 1
B      106  372.69 4708.02   58.96 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_supers;sync_inodes_sb;filemap_fdatawait_keep_errors;__filemap_fdatawait_range;wait_on_page_bit_common;io_schedule;schedul
e;__sched_text_start;finish_task_switch 1
B        1  376.37 4615.34 4615.34 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_supers;sync_inodes_sb;wb_wait_for_completion;schedule;__sched_text_start;finish_task_switch 1
B        1 4991.72   33.25   33.25 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_supers;sync_inodes_sb;filemap_fdatawait_keep_errors;__filemap_fdatawait_range;wait_on_page_bit_common;io_schedule;schedul
e;__sched_text_start;finish_task_switch 1
B        1 5109.71  188.57  188.57 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_supers;ext4_sync_fs;jbd2_log_wait_commit;schedule;__sched_text_start;finish_task_switch 1
B        5 5109.71  191.09  191.08 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_supers;ext4_sync_fs;blkdev_issue_flush;submit_bio_wait;wait_for_completion_io;_cond_resched;preempt_schedule_common;__sch
ed_text_start;finish_task_switch 1
B        4 5298.34    2.42    2.35 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_supers;ext4_sync_fs;blkdev_issue_flush;submit_bio_wait;wait_for_completion_io;io_schedule_timeout;schedule_timeout;schedu
le;__sched_text_start;finish_task_switch 1
B       29 5301.60  156.10  149.52 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_bdevs;__filemap_fdatawrite_range;do_writepages;generic_writepages;write_cache_pages;__writepage;__block_write_full_page;s
ubmit_bh_wbc;submit_bio;generic_make_request;blk_mq_make_request;blk_mq_get_request;blk_mq_get_tag;io_schedule;schedule;__sched_text_start;finish_task_switch 1
B       42 5458.00   12.08   11.86 ;kretprobe_trampoline;__x64_sys_sync;ksys_sync;iterate_bdevs;filemap_fdatawait_keep_errors;__filemap_fdatawait_range;wait_on_page_bit_common;io_schedule;schedule;__sched_text_s
tart;finish_task_switch 1

Show folded kernel stacks of sycall:sync while it's blocked on IO, as we can
see it spent most of it's time 4615.34ms inside wb_wait_for_completion().

USAGE message:

usage: funcslower.py [-hf] [-p PID] [-U | -K] [-m MIN_MS] [-u MIN_US] [-a ARGUMENTS] [-T]
                     [-t] [-v]
                     function [function ...]

Trace slow kernel or user function calls.

positional arguments:
  function              function(s) to trace

optional arguments:
  -h, --help            show this help message and exit
  -p PID, --pid PID     trace this PID only
  -m MIN_MS, --min-ms MIN_MS
                        minimum duration to trace (ms)
  -u MIN_US, --min-us MIN_US
                        minimum duration to trace (us)
  -U, --user-stack
                        show stacks from user space
  -K, --kernel-stack
                        show stacks from kernel space
  -f                    print output in folded stack format.
  -a ARGUMENTS, --arguments ARGUMENTS
                        print this many entry arguments, as hex
  -T, --time            show HH:MM:SS timestamp
  -t, --timestamp       show timestamp in seconds at us resolution
  -v, --verbose         print the BPF program for debugging purposes

examples:
  ./funcslower vfs_write       # trace vfs_write calls slower than 1ms
  ./funcslower -m 10 vfs_write # same, but slower than 10ms
  ./funcslower -u 10 c:open    # trace open calls slower than 10us
  ./funcslower -p 135 c:open   # trace pid 135 only
  ./funcslower c:malloc c:free # trace both malloc and free slower than 1ms
  ./funcslower -a 2 c:open     # show first two arguments to open
