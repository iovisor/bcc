Demonstrations of bindsnoop, the Linux eBPF/bcc version.

This tool traces the kernel function performing socket binding and 
print socket options set before the system call invocation that might
impact bind behavior and bound interface:
SOL_IP     IP_FREEBIND              F....
SOL_IP     IP_TRANSPARENT           .T...
SOL_IP     IP_BIND_ADDRESS_NO_PORT  ..N..
SOL_SOCKET SO_REUSEADDR             ...R.
SOL_SOCKET SO_REUSEPORT             ....r


# ./bindsnoop.py
Tracing binds ... Hit Ctrl-C to end
       PID  COMM         IP  SADDR                            SPORT   OPTS    BOUND_IF
   2822730  fetch         6  fe80::2000:bff:fe82:3ac          41231  .....           0
   2833408  test_bind_op  4  192.168.1.100                        0  F.N..           0
    868752  test_bind_op  4  192.168.1.101                    32829  F..R.           0
   2871634  test_bind_op  4  192.168.1.102                    63765  F...r           0

The output shows four bind system calls: one from the fetch process with no socket options set,
and three "test_bind_op" instances, one with IP_FREEBIND and IP_BIND_ADDRESS_NO_PORT options,
one with IP_FREEBIND and SO_REUSEADDR, and another with IP_FREEBIND and SO_REUSEPORT.

The -t option prints a timestamp column

# ./bindsnoop.py -t
TIME(s)         PID  COMM         IP  SADDR                            SPORT   OPTS    BOUND_IF
0.000       2881566  Acceptor Thr  6  ::                               44563  ...R.           0
0.004       2881566  Acceptor Thr  6  ::                               34835  ...R.           0
2.222       2871634  test_bind_op  4  192.168.1.102                    49411  F...r           0
5.860       2881794  python3.7     6  ::1                              50113  .....           0

The -U option prints a UID column:

# ./bindsnoop.py -U
UID          PID  COMM         IP  SADDR                            SPORT   OPTS    BOUND_IF
127072   2871634  test_bind_op  4  192.168.1.102                    41331  F...r           0
127072   2908234  Acceptor Thr  6  ::                               46567  ...R.           0
0        2908695  dig           6  ::                               64507  .....           0

The -u option filtering UID:

# ./bindsnoop.py -Uu 0
Tracing binds ... Hit Ctrl-C to end
UID          PID  COMM         IP  SADDR                            SPORT   OPTS    BOUND_IF
0        2924152  fetch         6  fe80::2000:bff:fe82:3ac          49397  .....           0
0        2924402  fetch         6  fe80::2000:bff:fe82:3ac          33137  .....           0
0        2923339  test_bind_op  4  127.0.0.1                        46493  ...R.           1
0        2932534  Acceptor Thr  6  ::                               40163  ...R.           0



In order to track heavy bind usage one can use --count option
# ./bindsnoop.py --count
Tracing binds ... Hit Ctrl-C to end
LADDR                                           LPORT     BINDS
0.0.0.0                                          6771     4
0.0.0.0                                          4433     4
127.0.0.1                                       33665     1


Usage message:
# ./bindsnoop.py -h
usage: bindsnoop.py [-h] [-t] [-p PID] [-P PORT] [-E] [-U] [-u UID] [--count]

Trace TCP binds

optional arguments:
  -h, --help            show this help message and exit
  -t, --timestamp       include timestamp on output
  -p PID, --pid PID     trace this PID only
  -P PORT, --port PORT  comma-separated list of ports to trace.
  -E, --errors          include errors in the output.
  -U, --print-uid       include UID on output
  -u UID, --uid UID     trace this UID only
  --count               count binds per src ip and port

examples:
    ./bindsnoop           # trace all TCP bind()s
    ./bindsnoop -t        # include timestamps
    ./bindsnoop -p 181    # only trace PID 181
    ./bindsnoop -P 80     # only trace port 80
    ./bindsnoop -P 80,81  # only trace port 80 and 81
    ./bindsnoop -U        # include UID
    ./bindsnoop -u 1000   # only trace UID 1000
    ./bindsnoop -E        # report bind errors
    ./bindsnoop --count   # count bind per src ip

it is reporting socket options set before the bins call
impacting system call behavior:
 SOL_IP     IP_FREEBIND              F....
 SOL_IP     IP_TRANSPARENT           .T...
 SOL_IP     IP_BIND_ADDRESS_NO_PORT  ..N..
 SOL_SOCKET SO_REUSEADDR             ...R.
 SOL_SOCKET SO_REUSEPORT             ....r

 SO_BINDTODEVICE interface is reported as "BOUND_IF" index

