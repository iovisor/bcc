Demonstrations of fdleak.

fdleak trace and display over-threshold fds to detect FD leaks process.

All FD allocate will be traced, if the threshold is exceeded or EMFILE 
occurs, then will be recorded by the monitoring program.

`In UNIX, everything is a file`, file leakage problems may occur when 
most resources are used improperly, eg:
  file, socket, eventfd, pipe, ashmem, dmabuf, syncfence ...

It's a light and easy to use ebpf probe fd alloc and monitor over-threshold 
fds process, collects stack and list open files.
----
For example:

# ./fdleak 
Trace and display over-threshold fds to detect FD leaks process, ctrl-c to exit.

------------------------------------------------------
TIME       COMM             PID    FDs
[14:50:12] test_tcp_leak    6908   820

------------------------------------------------------
TIME       COMM             PID    FDs
[14:50:12] test_tcp_leak    6908   821

------------------------------------------------------
TIME       COMM             PID    FDs
[14:50:12] test_tcp_leak    6908   823

------------------------------------------------------
TIME       COMM             PID    FDs
[14:50:12] test_tcp_leak    6908   824

----
^ `test_tcp_leak` triggered leak monitor
----
Simple info print is difficult to find the rootcause of file leakage . 
you need to obtain the file type and allocation stack used by the 
defective  process to help analysis.

Use the '-a' switch:
----
# ./fdleak -a
Trace and display over-threshold fds to detect FD leaks process, ctrl-c to exit.

------------------------------------------------------
TIME       COMM             PID    FDs
[14:34:59] test_tcp_leak    3918   820
total 0
dr-x------ 2 vachel.yang vachel.yang  0 Oct 12 14:34 .
dr-xr-xr-x 9 vachel.yang vachel.yang  0 Oct 12 14:34 ..
lrwx------ 1 vachel.yang vachel.yang 64 Oct 12 14:34 0 -> /dev/pts/20
lrwx------ 1 vachel.yang vachel.yang 64 Oct 12 14:34 1 -> /dev/pts/20
lrwx------ 1 vachel.yang vachel.yang 64 Oct 12 14:34 10 -> socket:[13188761]
lrwx------ 1 vachel.yang vachel.yang 64 Oct 12 14:34 100 -> socket:[13187913]
......
lrwx------ 1 vachel.yang vachel.yang 64 Oct 12 14:34 996 -> socket:[13197845]
lrwx------ 1 vachel.yang vachel.yang 64 Oct 12 14:34 997 -> socket:[13197846]
lrwx------ 1 vachel.yang vachel.yang 64 Oct 12 14:34 998 -> socket:[13197847]
lrwx------ 1 vachel.yang vachel.yang 64 Oct 12 14:34 999 -> socket:[13197848]
dump stack:
user
	accept+0x10 [libc-2.23.so]
	main+0x13 [test_tcp_leak]
	__libc_start_main+0xf0 [libc-2.23.so]
	[unknown]
kernel
	kretprobe_trampoline+0x0 [kernel]
	SYSC_accept4+0x9f [kernel]
	SyS_accept+0x10 [kernel]
	do_syscall_64+0x73 [kernel]
	entry_SYSCALL_64_after_hwframe+0x41 [kernel]

------------------------------------------------------
TIME       COMM             PID    FDs
[14:34:59] test_tcp_leak    3918   821
dump stack:
user
	accept+0x10 [libc-2.23.so]
	main+0x13 [test_tcp_leak]
	__libc_start_main+0xf0 [libc-2.23.so]
	[unknown]
kernel
	kretprobe_trampoline+0x0 [kernel]
	SYSC_accept4+0x9f [kernel]
	SyS_accept+0x10 [kernel]
	entry_SYSCALL_64_after_hwframe+0x41 [kernel]

----
^ `test_tcp_leak` open too much socket, trace at 'main+0x13 [test_tcp_leak]'
----
USAGE message:
usage: my_test.py [-h] [-p PID] [-w WARN] [--dumpstack] [--lsof] [-a]

Trace FD leak

optional arguments:
  -h, --help            show this help message and exit
  -p PID, --pid PID     trace this PID only
  -w WARN, --warn WARN  set warning threshold,default is 819(1024*0.8)
  --dumpstack           show alloc fd stack
  --lsof                list of open files
  -a, --showall         show all debug info

examples:
    ./fdleak                # trace all process alloc_fd()
    ./fdleak -p 181         # only trace PID 181
    ./fdleak -w 900         # set warning threshold 900
    ./fdleak --dumpstack    # show alloc fd stack
    ./fdleak --lsof         # show open files
    ./fdleak -a             # show all debug info
