Demonstrations of scsisnoop, the Linux eBPF/bcc version.


scsisnoop traces SCSI layer I/O (disk I/O), and prints a line of output
per I/O. Example:

# ./scsisnoop
TIME(s)     COMM           PID    DISK    T SECTOR     BYTES  LAT(ms)
0.000000    kworker/u16:2  29466  sda     R 1867600    4096      0.21
0.000330    kworker/3:1H   193    sda     R 1881480    4096      0.19
0.001666    InputReader    1228   sda     R 1847944    155648    0.84
0.003512    InputReader    1228   sda     R 1848256    204800    0.96
0.003527    kworker/u16:1  31481  sda     R 1881488    4096      0.87
0.009361    Binder:946_5   946    sda     R 1603000    122880    0.62
0.011330    Binder:946_5   946    sda     R 1601688    147456    0.71
5.004452    kworker/u16:5  18167  sda     R 1867568    4096      0.19
5.004478    kworker/u16:5  18167  sda     R 1877776    4096      0.14
5.004539    kworker/u16:2  29466  sda     R 1878816    4096      0.17
5.004652    kworker/u16:1  31481  sda     R 1872128    4096      0.26
5.004665    surfaceflinger 949    sda     R 1507040    32768     0.37
5.004987    Binder:949_2   949    sda     R 1664544    12288     0.36
5.005259    Binder:949_2   949    sda     R 1664360    65536     0.67


This includes the PID and comm (process name) that were on-CPU at the time of
issue (which usually means the process responsible).

The latency of the disk I/O, measured from the issue to the device to its
completion, is included as the last column.

This example output is from what should be an idle system, however, the
following is visible in iostat:

$ iostat -x 1
[...]
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           0.12    0.00    0.12    0.00    0.00   99.75

Device: rrqm/s  wrqm/s    r/s    w/s  rkB/s  wkB/s  await  svctm  %util
xvda      0.00    0.00   0.00   4.00   0.00  16.00   0.00   0.00   0.00
xvdb      0.00    0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00
xvdc      0.00    0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00
md0       0.00    0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00

There are 4 write IOPS.

The output of scsisnoop identifies the reason: multiple supervise processes are
issuing writes to the xvda1 disk. I can now drill down on supervise using other
tools to understand its file system workload.



USAGE message:

usage: scsisnoop.py [-h]

Trace SCSI layer I/O

optional arguments:
  -h, --help   show this help message and exit

examples:
    ./scsisnoop           # trace all SCSI layer I/O
